---
# tasks for IdP Restore
- name: "RESTORE - Retrieve IdP sealer.jks and sealer.kver backups"
  command: "{{ item }}"
  with_items:
   - "rsync -avzh -e 'ssh -i {{ lookup('env','HOME') }}/.ssh/idpbakuser_rsa' {{ bck_uri }}/{{ fqdn }}/{{ host_bck_path }}/sealer.jks {{ files_dir }}/{{ fqdn }}/idp/credentials/sealer.jks"
   - "rsync -avzh -e 'ssh -i {{ lookup('env','HOME') }}/.ssh/idpbakuser_rsa' {{ bck_uri }}/{{ fqdn }}/{{ host_bck_path }}/sealer.kver {{ files_dir }}/{{ fqdn }}/idp/credentials/sealer.kver"
  delegate_to: 127.0.0.1
  when:
    - bck_uri is defined
    - bck_uri != ""
    - host_bck_path is defined
    - host_bck_path != ""
  tags: restore

- name: "Restore Sealer JKS and KVER"
  copy:
   src: "{{ item.src }}"
   dest: "{{ item.dest }}"
   owner: "jetty"
   group: "root"
   mode: "{{ item.mode }}"
  with_items:
   - { src: "{{ files_dir }}/{{ fqdn }}/idp/credentials/sealer.jks", dest: "/opt/shibboleth-idp/credentials/sealer.jks", mode: "0604" }
   - { src: "{{ files_dir }}/{{ fqdn }}/idp/credentials/sealer.kver", dest: "/opt/shibboleth-idp/credentials/sealer.kver", mode: "0604" }
  when:
    - bck_uri is defined
    - bck_uri != ""
    - host_bck_path is defined
    - host_bck_path != ""
  tags: restore

- name: "RESTORE - Retrieve MySQL 'statistics' backup"
  command: "rsync -avzh -e 'ssh -i {{ lookup('env','HOME') }}/.ssh/idpbakuser_rsa' {{ bck_uri }}/{{ fqdn }}/{{ host_bck_path }}/statistics_db.sql.gz {{ files_dir }}/{{ fqdn }}/idp/mysql-restore/statistics_db.sql.gz"
  delegate_to: 127.0.0.1
  when:
    - bck_uri is defined
    - bck_uri != ""
    - host_bck_path is defined
    - host_bck_path != ""
  tags: restore
  
- name: "RESTORE - Retrieve MySQL 'shibboleth' backup"
  command: "rsync -avzh-e 'ssh -i {{ lookup('env','HOME') }}/.ssh/idpbakuser_rsa' {{ bck_uri }}/{{ fqdn }}/{{ host_bck_path }}/shibboleth_db.sql.gz {{ files_dir }}/{{ fqdn }}/idp/mysql-restore/shibboleth_db.sql.gz"
  delegate_to: 127.0.0.1
  when:
    - bck_uri is defined
    - bck_uri != ""
    - host_bck_path is defined
    - host_bck_path != ""
    - idp_db_restore == true
  tags: restore

- name: "RESTORE - Put 'statistics' database backup in the '/root' directory"
  copy:
   src: "{{ files_dir }}/{{ fqdn }}/idp/mysql-restore/statistics_db.sql.gz"
   dest: "/root/statistics_db.sql.gz"
   owner: "root"
   group: "root"
   mode: "0600"
  tags: restore

- name: "RESTORE - Put 'shibboleth' database backup in the '/root' directory"
  copy:
   src: "{{ files_dir }}/{{ fqdn }}/idp/mysql-restore/shibboleth_db.sql.gz"
   dest: "/root/shibboleth_db.sql.gz"
   owner: "root"
   group: "root"
   mode: "0600"
  when:
   - idp_db_restore == true
  tags: restore

- name: "RESTORE - Extract 'statistics' database backup"
  command: "gunzip /root/statistics_db.sql.gz"
  tags: restore

- name: "RESTORE - Extract 'shibboleth' database backup"
  command: "gunzip /root/shibboleth_db.sql.gz"
  when:
   - idp_db_restore == true
  tags: restore

- name: "RESTORE - Assign the right permissions to the 'statistics' backup extracted"
  file:
   dest: "/root/statistics_db.sql"
   owner: "root"
   group: "root"
   mode: "600"
  tags: restore

- name: "RESTORE - Assign the right permissions to the 'shibboleth' backup extracted"
  file:
   dest: "/root/shibboleth_db.sql"
   owner: "root"
   group: "root"
   mode: "600"
  when:
   - idp_db_restore == true
  tags: restore

- name: "RESTORE - DROP the existing 'statistics' database"
  mysql_db:
   name: "statistics"
   state: absent
  tags: restore

- name: "RESTORE - DROP the existing 'shibboleth' database"
  mysql_db:
   name: "shibboleth"
   state: absent
  when:
   - idp_db_restore == true
  tags: restore

- name: "RESTORE - Restore 'statistics' database"
  mysql_db:
   encoding: "utf8"
   state: import
   name: all
   target: "/root/statistics_db.sql"
  tags: restore

- name: "RESTORE - Restore 'shibboleth' database"
  mysql_db:
   encoding: "utf8"
   state: import
   name: all
   target: "/root/shibboleth_db.sql"
  when:
   - idp_db_restore == true
  tags: restore

- name: "RESTORE - Remove the backups restored from /root directory"
  file:
   dest: "{{ item }}"
   state: "absent"
  with_items:
   - "/root/shibboleth_db.sql"
   - "/root/statistics_db.sql"
  tags: restore

- name: "RESTORE - Check if the HOST YAML file is encrypted with Vault"
  command: "cat {{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
  delegate_to: 127.0.0.1
  register: host_yaml
  tags: restore

- name: "RESTORE - Decrypt Vaulted HOST YAML file"
  command: "ansible-vault decrypt --vault-password-file {{ vault_file }} {{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
  delegate_to: 127.0.0.1
  when: "'ANSIBLE_VAULT' in host_yaml.stdout"
  tags: restore

- name: "RESTORE - Be sure to set 'idp_db_restore' to 'false'"
  lineinfile:
   path: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
   regexp: '^idp_db_restore'
   line: 'idp_db_restore: "false"'
  delegate_to: 127.0.0.1
  tags: restore

- name: "RESTORE - Encrypt HOST YAML file with Vault"
  command: "ansible-vault encrypt --vault-password-file {{ vault_file }} {{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
  delegate_to: 127.0.0.1
  when: "'ANSIBLE_VAULT' in host_yaml.stdout"
  tags: restore

- name: "RESTORE - Be sure to set the right owner and group of YML file"
  file:
   path: "{{ inventory_dir }}/host_vars/{{ inventory_hostname }}.yml"
   owner: "{{ lookup('env','USER') }}"
   group: "{{ lookup('env','USER') }}"
   state: file
  delegate_to: 127.0.0.1
  tags: restore
