#!/usr/bin/env python
#-*- coding: utf-8 -*-

import xml.etree.cElementTree as ET
from operator import itemgetter
from collections import OrderedDict

import sys, getopt
import optparse
from subprocess import check_output
import shlex
import os
from cStringIO import StringIO

# PARAMETERS

spEntityId  = "{{ check_mk['spEntityID'] }}"
user        = "{{ check_mk['testuser'] }}"
basedn      = "{{ check_mk['baseDN'] }}"
searchuser  = "{{ check_mk['searchuser'] }}"
ldappasswd  = "{{ check_mk['searchuser_pw'] }}"
ldapsrv     = "{{ check_mk['ldap_url'] }}"
userid_attr = "{{ check_mk['userid_attr'] }}"
scope       = "{{ check_mk['idp_scope'] }}"
{% if check_mk['ldap_useStartTLS'] is equalto 'true' or check_mk['ldap_useStartTLS'] is equalto 'True' %}
tls         = True
{% else %}
tls         = False
{% endif %}

# END PARAMETERS

parser = optparse.OptionParser()
parser.add_option("-d", "--debug", dest="debug", action="store_true", help="Print debug information", default=False)
parser.add_option("-e", "--entity", dest="spEntityId", help="Specify SP entityId", default=spEntityId)
parser.add_option("-p", "--principal", dest="user", help="Username to be checked", default=user)
(options, args) = parser.parse_args()

if options.debug:
    print "Options passed to command:   %s" % options
    print "Arguments passed to command: %s" % args

os.environ["JAVA_HOME"] = "{{ java_home_dir }}"
result = check_output(shlex.split('/opt/shibboleth-idp/bin/aacli.sh --saml2 --principal '+ user +' --requester ' + spEntityId))

namespaces = {
   'saml2': 'urn:oasis:names:tc:SAML:2.0:assertion'
}

tree = ET.parse(StringIO(result))
root = tree.getroot()
attrs = root.findall("./saml2:AttributeStatement/saml2:Attribute", namespaces)

attrs_list = list()

for samlAttr in attrs:
   friendlyName = samlAttr.get('FriendlyName')
   attr_value = samlAttr.find("./saml2:AttributeValue", namespaces).text

   if friendlyName == "eduPersonTargetedID":
      nameID = samlAttr.find("./saml2:AttributeValue/saml2:NameID", namespaces)
      NameQualifier = nameID.get('NameQualifier')
      SPNameQualifier = nameID.get('SPNameQualifier')
      attr_value = NameQualifier + '!' + SPNameQualifier + '!' + nameID.text

   attribute = friendlyName + ' = ' + attr_value
   attrs_list.append(attribute)

validAttrs = True
attrErrString = ""
try:
   import ldap

   # Connect to LDAP server via plain, ssl or tls.
   con = ldap.initialize(ldapsrv)
   if tls: con.set_option(ldap.OPT_X_TLS_DEMAND, True)
   con.simple_bind_s(searchuser,ldappasswd)

   # Search the LDAP for the right user.
   filter = '(objectclass=person)'
   attrs = ['*']
   searchuser  = userid_attr + '=' + options.user + ',' + basedn
   ldapuser = con.search_s(searchuser, ldap.SCOPE_SUBTREE, filter, attrs)[0][1]

   if options.debug: print ldapuser

   # Verify all interesting attrs comparing LDAP with Shibboleth session.
   #
   # ldap_attr_name:saml_friendlyName
   # 
   # @uid == uid@<scope>      (where 'scope' contains the domain of the organization)
   attrs = {
            'givenName':'givenName',
            'sn':'sn',
            '@eduPersonAffiliation':'eduPersonScopedAffiliation',
            '@uid':'eduPersonPrincipalName'
           }

   spAttrs = {}
   for value in attrs_list:
      if '=' in value:
         spAttrs[value.split('=', 1)[0].strip()] = value.split('=', 1)[1].strip()

   if options.debug: print spAttrs

   # Check all attributes
   for curAttrLDAP in attrs:
      if curAttrLDAP[0] == '@':
         valLDAP = [('{0}@'+scope).format(i) for i in ldapuser[curAttrLDAP[1:]]]
      else:
         valLDAP = ldapuser[curAttrLDAP]

      valSP = spAttrs[attrs[curAttrLDAP]]
      if options.debug: print "\n\nChecking %s with %s for attribute: %s => %s" % (valLDAP, valSP, curAttrLDAP, attrs[curAttrLDAP])

      if not valSP in valLDAP:
         validAttrs = False
         attrErrString += "Attribute %s in LDAP has value %s in LDAP session and value %s in the SP.\n" % (curAttrLDAP, valLDAP, valSP)

except Exception as e:
   # In case of an error put validAttrs to False to return exit status 1 below.
   if options.debug: print e
   validAttrs = False

if validAttrs:
   print "0 check_aacli - SUCCESS - IdP has retrieved metadata of Test SP and is sending attributes to it"
   sys.exit(0)
else:
   print "1 check_aacli - CRITICAL - IdP doesn't send attributes to Test SP"
   print attrErrString
   sys.exit(1)
