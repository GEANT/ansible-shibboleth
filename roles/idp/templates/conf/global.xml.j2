<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"

       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Use this file to define any custom beans needed globally. -->

    <!--
    Algorithm whitelists and blacklists that override or merge with library defaults. Normally you can leave
    these empty or commented and use the system defaults, but you can override those defaults using these lists.
    Each <value> element is an algorithm URI, or you can use <util:constant> elements in place of literal values.
    -->

    <!--
    <util:list id="shibboleth.SignatureWhitelist">
    </util:list>

    <util:list id="shibboleth.SignatureBlacklist">
    </util:list>

    <util:list id="shibboleth.EncryptionWhitelist">
    </util:list>

    <util:list id="shibboleth.EncryptionBlacklist">
    </util:list>
    -->

    <!--
    If you need to define and inject custom Java object(s) into the various views used throughout the
    system (errors, login, logout, etc.), you can uncomment and define the bean below to be of any
    type required. It will appear in the view scope as a variable named "custom".

    The example below defines the bean as a map, which allows you to inject multiple objects under
    named keys to expand the feature to support multiple injected objects.
    -->

    <!--
    <util:map id="shibboleth.CustomViewContext">
        <entry key="foo" value="bar"/>
    </util:map>
    -->

{% if idp_config['idp_persistentId_type'] is defined and idp_config['idp_persistentId_type'] == 'stored' %}
    <!-- A DataSource bean suitable for use in the idp.persistentId.dataSource property. -->
    <bean id="MyDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          p:driverClassName="org.mariadb.jdbc.Driver"
          p:url="jdbc:mysql://{{ idp_config['shibboleth_db_host'] }}:3306/shibboleth?autoReconnect=true"
          p:username="shibboleth"
          p:password="{{ idp_config['shibboleth_db_password'] }}"
          p:maxActive="10"
          p:maxIdle="5"
          p:maxWait="15000"
          p:testOnBorrow="true"
          p:validationQuery="select 1"
          p:validationQueryTimeout="5" />
{% endif %}
{% if idp_config['storage_memcache_hosts'] is defined and (idp_config['storage_memcache_hosts']|length > 0)%}
	  <bean id="shibboleth.MemcachedStorageService"
		      class="org.opensaml.storage.impl.memcached.MemcachedStorageService"
		      c:timeout="2">
	      
          <constructor-arg name="client">
             <bean class="net.spy.memcached.spring.MemcachedClientFactoryBean"
                   p:servers="{{ idp_config['storage_memcache_hosts'] }}"
                   p:protocol="BINARY"
                   p:locatorType="CONSISTENT"
                   p:failureMode="Redistribute">
               <property name="hashAlg">
                 <util:constant static-field="net.spy.memcached.DefaultHashAlgorithm.FNV1_64_HASH" />
               </property>
               <property name="transcoder">
                 <!-- DO NOT MODIFY THIS PROPERTY -->
                 <bean class="org.opensaml.storage.impl.memcached.StorageRecordTranscoder" />
               </property>
             </bean>
	        </constructor-arg>
	  </bean>
{% endif %}
</beans>
