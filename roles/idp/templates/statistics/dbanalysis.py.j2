#!/usr/bin/env python3
# coding=utf-8

# Copyright 2010 University Corporation for Advanced Internet Development, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""Parse Shibboleth 2.x or 3.x Identity Provider audit logfile and generate simple stats.
   Audit log file format: https://wiki.shibboleth.net/confluence/display/SHIB2/IdPLogging"""

import sys
import fileinput
import os
import pymysql
import random
from optparse import OptionParser
from operator import itemgetter
from datetime import datetime, date

def parseFiles(files):
    """Build datastructures from lines."""
    lines = []
    for line in fileinput.input(files, openhook=fileinput.hook_compressed):
        if (type(line) is bytes): line = line.decode('utf-8')
        lines.append(line.rstrip().split("|"))

    dictAll = {}

    idp = None

    for event in lines:
        try:
            strdatetime,reqBind,reqId,rp,msgProfile,idp,respBind,respId,user,authnMeth,relAttribs,nameId,assertIds,EOL = event
            if (idp == '' or idp == None): continue
{% if ldap is defined %}
{% if ldap['create_test_user'] is defined and ldap['create_test_user'] in ['Yes','yes','YES'] %}
{% if check_mk is defined and check_mk['spEntityID'] != '' %}
            if (user == "testuser" and rp == "{{ check_mk['spEntityID'] }}"): continue
{% endif %}
{% if idp_config['sup_rs'] == 'yes' or idp_config['sup_rs'] == 'Yes' %}
            if (user == "testuser" and rp == "https://fake-rs.example.org/shibboleth"): continue
{% endif %}
{% if idp_config['sup_coco'] == 'yes' or idp_config['sup_coco'] == 'Yes' %}
            if (user == "testuser" and rp == "https://fake-coco.example.org/shibboleth"): continue
{% endif %}
{% endif %}
{% endif %}
        except ValueError:
            print (f"ERROR: Unsupported log file format or using compressed log files. See the documentation in the Shibboleth wiki.")
            sys.exit(-1)

        # set the 'curdate' with YYYY-MM-DD format
        curdate = str(datetime.strptime(strdatetime, '%Y%m%dT%H%M%SZ').date())

        # if the 'curdate' is not in dictAll dictionary, create a new dictionary for that curdate
        if not curdate in dictAll:
            dictAll[curdate] = {}

        # if the relying party 'rp' does not exist for the 'curdate' date, create a new dictionary for it at that curdate
        if not rp in dictAll[curdate]:
            dictAll[curdate][rp] = {}

        # if the 'user' exists 
        if not user == '':
            # then search him in the dictionary created for the relying party 'rp' and add a login for him
            if user in dictAll[curdate][rp]:
                dictAll[curdate][rp][user] += 1
            # otherwise set to 1 the logins for that user because it is his first login
            else:
                dictAll[curdate][rp][user] = 1

    database = pymysql.connect("{{ idp_stats['db_host'] }}", "statistics", "{{ idp_stats['db_pw'] }}", "statistics")

    cursor = database.cursor()
    cursor.execute("SELECT MAX(data) FROM logins")
    (lastdata,) = cursor.fetchone()

    count = 0
    for data, a in dictAll.items():
       if datetime.strptime(data, "%Y-%m-%d").date() <= date.today():
          if lastdata is None or datetime.strptime(data, "%Y-%m-%d").date() > lastdata:
             for sp, b in a.items():
                for utente, numlogins in b.items():
                   if idp:
                     #print (f"INSERT INTO `logins` VALUES ('{idp}', '{data}', '{sp}', '{utente}', '{numlogins}');")
                     cursor.execute(f"INSERT INTO logins VALUES ('{idp}', '{data}', '{sp}', '{utente}', '{numlogins}');")
                     database.commit()
                     count = count + 1

    database.close()
    print (f"Inserted {count} elements in the login database.")

def main():
    """Parse command line options and arguments and their contents."""
    parser = OptionParser()
    usage = "usage: %prog [files ...]"
    (options, args) = parser.parse_args()
    if len(args) == 0:
        print ("Missing filename(s). Specify '-' as filename to read from STDIN.\n")
        parser.print_help()
        sys.exit(-1)

    parseFiles(args)

if __name__ == "__main__":
    main()
